
UltrasonicSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000296c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002afc  08002afc  00003afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b68  08002b68  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b68  08002b68  00003b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b70  08002b70  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b70  08002b70  00003b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b74  08002b74  00003b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002b78  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          000001d4  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008473  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015bf  00000000  00000000  0000c4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  0000dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000786  00000000  00000000  0000e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fea9  00000000  00000000  0000ec0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a993  00000000  00000000  0002eab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6e88  00000000  00000000  0003944a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001002d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002db4  00000000  00000000  00100318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001030cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002ae4 	.word	0x08002ae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002ae4 	.word	0x08002ae4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <LCD_Init>:
char buffer[16];
void LCD_EnablePulse(void);
void LCD_Send4Bits(uint8_t data);
void LCD_Command(uint8_t cmd);
// Initialize LCD
void LCD_Init(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
    HAL_Delay(20); // Wait for power stabilization
 8000564:	2014      	movs	r0, #20
 8000566:	f000 fbdf 	bl	8000d28 <HAL_Delay>

    LCD_Command(0x02); // Set 4-bit mode
 800056a:	2002      	movs	r0, #2
 800056c:	f000 f812 	bl	8000594 <LCD_Command>
    LCD_Command(0x28); // 2-line, 5x8 matrix
 8000570:	2028      	movs	r0, #40	@ 0x28
 8000572:	f000 f80f 	bl	8000594 <LCD_Command>
    LCD_Command(0x0C); // Display ON, Cursor OFF
 8000576:	200c      	movs	r0, #12
 8000578:	f000 f80c 	bl	8000594 <LCD_Command>
    LCD_Command(0x06); // Auto increment cursor
 800057c:	2006      	movs	r0, #6
 800057e:	f000 f809 	bl	8000594 <LCD_Command>
    LCD_Command(0x01); // Clear display
 8000582:	2001      	movs	r0, #1
 8000584:	f000 f806 	bl	8000594 <LCD_Command>
    HAL_Delay(2);
 8000588:	2002      	movs	r0, #2
 800058a:	f000 fbcd 	bl	8000d28 <HAL_Delay>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <LCD_Command>:

// Send command to LCD
void LCD_Command(uint8_t cmd) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET); // RS = 0 (Command mode)
 800059e:	2200      	movs	r2, #0
 80005a0:	2102      	movs	r1, #2
 80005a2:	4808      	ldr	r0, [pc, #32]	@ (80005c4 <LCD_Command+0x30>)
 80005a4:	f000 fe7e 	bl	80012a4 <HAL_GPIO_WritePin>

    LCD_Send4Bits(cmd >> 4); // Send upper nibble
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	091b      	lsrs	r3, r3, #4
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f854 	bl	800065c <LCD_Send4Bits>
    LCD_Send4Bits(cmd);      // Send lower nibble
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f850 	bl	800065c <LCD_Send4Bits>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40020c00 	.word	0x40020c00

080005c8 <LCD_Char>:

// Send character to LCD
void LCD_Char(uint8_t data) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_SET); // RS = 1 (Data mode)
 80005d2:	2201      	movs	r2, #1
 80005d4:	2102      	movs	r1, #2
 80005d6:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <LCD_Char+0x30>)
 80005d8:	f000 fe64 	bl	80012a4 <HAL_GPIO_WritePin>

    LCD_Send4Bits(data >> 4); // Send upper nibble
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	091b      	lsrs	r3, r3, #4
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f83a 	bl	800065c <LCD_Send4Bits>
    LCD_Send4Bits(data);      // Send lower nibble
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f836 	bl	800065c <LCD_Send4Bits>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40020c00 	.word	0x40020c00

080005fc <LCD_String>:

// Send string to LCD
void LCD_String(char *str) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000604:	e006      	b.n	8000614 <LCD_String+0x18>
        LCD_Char(*str++);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	607a      	str	r2, [r7, #4]
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ffda 	bl	80005c8 <LCD_Char>
    while (*str) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1f4      	bne.n	8000606 <LCD_String+0xa>
    }
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <LCD_SetCursor>:

// Set cursor position
void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000626:	b580      	push	{r7, lr}
 8000628:	b084      	sub	sp, #16
 800062a:	af00      	add	r7, sp, #0
 800062c:	4603      	mov	r3, r0
 800062e:	460a      	mov	r2, r1
 8000630:	71fb      	strb	r3, [r7, #7]
 8000632:	4613      	mov	r3, r2
 8000634:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d103      	bne.n	8000644 <LCD_SetCursor+0x1e>
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	3b80      	subs	r3, #128	@ 0x80
 8000640:	b2db      	uxtb	r3, r3
 8000642:	e002      	b.n	800064a <LCD_SetCursor+0x24>
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	3b40      	subs	r3, #64	@ 0x40
 8000648:	b2db      	uxtb	r3, r3
 800064a:	73fb      	strb	r3, [r7, #15]
    LCD_Command(pos);
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ffa0 	bl	8000594 <LCD_Command>
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <LCD_Send4Bits>:
    LCD_Command(0x01);
    HAL_Delay(2);
}

// Send 4-bit data
void LCD_Send4Bits(uint8_t data) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DATA_PORT, D4_PIN, (data >> 0) & 0x01);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	2104      	movs	r1, #4
 8000672:	4815      	ldr	r0, [pc, #84]	@ (80006c8 <LCD_Send4Bits+0x6c>)
 8000674:	f000 fe16 	bl	80012a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DATA_PORT, D5_PIN, (data >> 1) & 0x01);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	085b      	lsrs	r3, r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	2108      	movs	r1, #8
 8000688:	480f      	ldr	r0, [pc, #60]	@ (80006c8 <LCD_Send4Bits+0x6c>)
 800068a:	f000 fe0b 	bl	80012a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DATA_PORT, D6_PIN, (data >> 2) & 0x01);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	089b      	lsrs	r3, r3, #2
 8000692:	b2db      	uxtb	r3, r3
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	2110      	movs	r1, #16
 800069e:	480a      	ldr	r0, [pc, #40]	@ (80006c8 <LCD_Send4Bits+0x6c>)
 80006a0:	f000 fe00 	bl	80012a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DATA_PORT, D7_PIN, (data >> 3) & 0x01);
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	2120      	movs	r1, #32
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <LCD_Send4Bits+0x6c>)
 80006b6:	f000 fdf5 	bl	80012a4 <HAL_GPIO_WritePin>

    LCD_EnablePulse();
 80006ba:	f000 f807 	bl	80006cc <LCD_EnablePulse>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40020c00 	.word	0x40020c00

080006cc <LCD_EnablePulse>:

// Generate Enable Pulse
void LCD_EnablePulse(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2101      	movs	r1, #1
 80006d4:	4807      	ldr	r0, [pc, #28]	@ (80006f4 <LCD_EnablePulse+0x28>)
 80006d6:	f000 fde5 	bl	80012a4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 fb24 	bl	8000d28 <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <LCD_EnablePulse+0x28>)
 80006e6:	f000 fddd 	bl	80012a4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fb1c 	bl	8000d28 <HAL_Delay>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40020c00 	.word	0x40020c00

080006f8 <delay_us>:
TIM_HandleTypeDef htim2;
GPIO_InitTypeDef GPIO_InitStruct;
uint32_t start_time, stop_time, time_diff;
uint32_t distance_cm;

void delay_us(uint16_t time) {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <delay_us+0x30>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < time);
 800070a:	bf00      	nop
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <delay_us+0x30>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	429a      	cmp	r2, r3
 8000716:	d3f9      	bcc.n	800070c <delay_us+0x14>
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000078 	.word	0x20000078

0800072c <HCSR04_Read>:

void HCSR04_Read() {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
    // Send 10µs pulse to Trigger pin (PD11)
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000738:	482f      	ldr	r0, [pc, #188]	@ (80007f8 <HCSR04_Read+0xcc>)
 800073a:	f000 fdb3 	bl	80012a4 <HAL_GPIO_WritePin>
    delay_us(10);
 800073e:	200a      	movs	r0, #10
 8000740:	f7ff ffda 	bl	80006f8 <delay_us>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800074a:	482b      	ldr	r0, [pc, #172]	@ (80007f8 <HCSR04_Read+0xcc>)
 800074c:	f000 fdaa 	bl	80012a4 <HAL_GPIO_WritePin>

    // Wait for Echo pin (PD10) to go HIGH
    while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_RESET);
 8000750:	bf00      	nop
 8000752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000756:	4828      	ldr	r0, [pc, #160]	@ (80007f8 <HCSR04_Read+0xcc>)
 8000758:	f000 fd8c 	bl	8001274 <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f7      	beq.n	8000752 <HCSR04_Read+0x26>

    start_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000762:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <HCSR04_Read+0xd0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000768:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <HCSR04_Read+0xd4>)
 800076a:	6013      	str	r3, [r2, #0]

    // Wait for Echo pin (PD10) to go LOW
    while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_SET);
 800076c:	bf00      	nop
 800076e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000772:	4821      	ldr	r0, [pc, #132]	@ (80007f8 <HCSR04_Read+0xcc>)
 8000774:	f000 fd7e 	bl	8001274 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	2b01      	cmp	r3, #1
 800077c:	d0f7      	beq.n	800076e <HCSR04_Read+0x42>

    stop_time = __HAL_TIM_GET_COUNTER(&htim2);
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <HCSR04_Read+0xd0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000784:	4a1f      	ldr	r2, [pc, #124]	@ (8000804 <HCSR04_Read+0xd8>)
 8000786:	6013      	str	r3, [r2, #0]

    // Calculate time difference
    if (stop_time > start_time) {
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <HCSR04_Read+0xd8>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <HCSR04_Read+0xd4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d907      	bls.n	80007a4 <HCSR04_Read+0x78>
        time_diff = stop_time - start_time;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <HCSR04_Read+0xd8>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <HCSR04_Read+0xd4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a1a      	ldr	r2, [pc, #104]	@ (8000808 <HCSR04_Read+0xdc>)
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e009      	b.n	80007b8 <HCSR04_Read+0x8c>
    } else {
        time_diff = (0xFFFF - start_time) + stop_time;
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <HCSR04_Read+0xd8>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <HCSR04_Read+0xd4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80007b2:	33ff      	adds	r3, #255	@ 0xff
 80007b4:	4a14      	ldr	r2, [pc, #80]	@ (8000808 <HCSR04_Read+0xdc>)
 80007b6:	6013      	str	r3, [r2, #0]
    }

	// Convert time_diff to meters (integer-based)
	uint32_t distance_mm = (time_diff * 34) / 200; // Distance in millimeters
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <HCSR04_Read+0xdc>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4613      	mov	r3, r2
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	4413      	add	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <HCSR04_Read+0xe0>)
 80007c8:	fba3 2302 	umull	r2, r3, r3, r2
 80007cc:	099b      	lsrs	r3, r3, #6
 80007ce:	607b      	str	r3, [r7, #4]
	distance_cm = (distance_mm % 1000) / 10; // Extract centimeters (for decimal part)
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <HCSR04_Read+0xe4>)
 80007d4:	fba3 1302 	umull	r1, r3, r3, r2
 80007d8:	099b      	lsrs	r3, r3, #6
 80007da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007de:	fb01 f303 	mul.w	r3, r1, r3
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000814 <HCSR04_Read+0xe8>)
 80007e6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <HCSR04_Read+0xec>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	20000078 	.word	0x20000078
 8000800:	200000d0 	.word	0x200000d0
 8000804:	200000d4 	.word	0x200000d4
 8000808:	200000d8 	.word	0x200000d8
 800080c:	51eb851f 	.word	0x51eb851f
 8000810:	10624dd3 	.word	0x10624dd3
 8000814:	cccccccd 	.word	0xcccccccd
 8000818:	200000dc 	.word	0x200000dc

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f000 fa10 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f834 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f000 f8dc 	bl	80009e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800082c:	f000 f88e 	bl	800094c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    LCD_Init(); // Initialize LCD
 8000830:	f7ff fe96 	bl	8000560 <LCD_Init>
  	// Configure Timer 2 for microsecond delay
	HAL_TIM_Base_Start(&htim2);
 8000834:	4811      	ldr	r0, [pc, #68]	@ (800087c <main+0x60>)
 8000836:	f001 f9c3 	bl	8001bc0 <HAL_TIM_Base_Start>
	LCD_SetCursor(0, 0);
 800083a:	2100      	movs	r1, #0
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fef2 	bl	8000626 <LCD_SetCursor>
	LCD_String("   Ultrasonic   ");
 8000842:	480f      	ldr	r0, [pc, #60]	@ (8000880 <main+0x64>)
 8000844:	f7ff feda 	bl	80005fc <LCD_String>
	HAL_Delay(1000);
 8000848:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084c:	f000 fa6c 	bl	8000d28 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read();
 8000850:	f7ff ff6c 	bl	800072c <HCSR04_Read>
	  sprintf(buffer, "Distance: %03lu cm", distance_cm);  // Format: "X.XX m"
 8000854:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <main+0x68>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	490b      	ldr	r1, [pc, #44]	@ (8000888 <main+0x6c>)
 800085c:	480b      	ldr	r0, [pc, #44]	@ (800088c <main+0x70>)
 800085e:	f001 fca1 	bl	80021a4 <siprintf>
	  LCD_SetCursor(1, 0);  // Set LCD cursor to second row
 8000862:	2100      	movs	r1, #0
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff fede 	bl	8000626 <LCD_SetCursor>
	  LCD_String(buffer);
 800086a:	4808      	ldr	r0, [pc, #32]	@ (800088c <main+0x70>)
 800086c:	f7ff fec6 	bl	80005fc <LCD_String>
	  HAL_Delay(100);
 8000870:	2064      	movs	r0, #100	@ 0x64
 8000872:	f000 fa59 	bl	8000d28 <HAL_Delay>
  {
 8000876:	bf00      	nop
 8000878:	e7ea      	b.n	8000850 <main+0x34>
 800087a:	bf00      	nop
 800087c:	20000078 	.word	0x20000078
 8000880:	08002afc 	.word	0x08002afc
 8000884:	200000dc 	.word	0x200000dc
 8000888:	08002b10 	.word	0x08002b10
 800088c:	200000c0 	.word	0x200000c0

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b094      	sub	sp, #80	@ 0x50
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	2230      	movs	r2, #48	@ 0x30
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fca0 	bl	80021e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <SystemClock_Config+0xb4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	4a21      	ldr	r2, [pc, #132]	@ (8000944 <SystemClock_Config+0xb4>)
 80008be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <SystemClock_Config+0xb4>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <SystemClock_Config+0xb8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000948 <SystemClock_Config+0xb8>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <SystemClock_Config+0xb8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fce9 	bl	80012d8 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800090c:	f000 f8aa 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f000 ff4c 	bl	80017c8 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000936:	f000 f895 	bl	8000a64 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	@ 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000968:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_TIM2_Init+0x94>)
 800096a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800096e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_TIM2_Init+0x94>)
 8000972:	220f      	movs	r2, #15
 8000974:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_TIM2_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_TIM2_Init+0x94>)
 800097e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_TIM2_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_TIM2_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000990:	4813      	ldr	r0, [pc, #76]	@ (80009e0 <MX_TIM2_Init+0x94>)
 8000992:	f001 f8c5 	bl	8001b20 <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800099c:	f000 f862 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_TIM2_Init+0x94>)
 80009ae:	f001 f96f 	bl	8001c90 <HAL_TIM_ConfigClockSource>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009b8:	f000 f854 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_TIM2_Init+0x94>)
 80009ca:	f001 fb6f 	bl	80020ac <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f846 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000078 	.word	0x20000078

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <MX_GPIO_Init+0x78>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a00:	4a16      	ldr	r2, [pc, #88]	@ (8000a5c <MX_GPIO_Init+0x78>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_GPIO_Init+0x78>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000a14:	2200      	movs	r2, #0
 8000a16:	f640 013f 	movw	r1, #2111	@ 0x83f
 8000a1a:	4811      	ldr	r0, [pc, #68]	@ (8000a60 <MX_GPIO_Init+0x7c>)
 8000a1c:	f000 fc42 	bl	80012a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4619      	mov	r1, r3
 8000a32:	480b      	ldr	r0, [pc, #44]	@ (8000a60 <MX_GPIO_Init+0x7c>)
 8000a34:	f000 fa82 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD0 PD1 PD2
                           PD3 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000a38:	f640 033f 	movw	r3, #2111	@ 0x83f
 8000a3c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <MX_GPIO_Init+0x7c>)
 8000a50:	f000 fa74 	bl	8000f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <Error_Handler+0x8>

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ad0:	d10d      	bne.n	8000aee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_TIM_Base_MspInit+0x3c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_TIM_Base_MspInit+0x3c>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_TIM_Base_MspInit+0x3c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <NMI_Handler+0x4>

08000b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <MemManage_Handler+0x4>

08000b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b56:	f000 f8c7 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	@ (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f001 fb30 	bl	80021f4 <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20020000 	.word	0x20020000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	200000e0 	.word	0x200000e0
 8000bc8:	20000230 	.word	0x20000230

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bf4:	f7ff ffea 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	@ (8000c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	@ (8000c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f001 faef 	bl	8002200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fdfb 	bl	800081c <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c34:	08002b78 	.word	0x08002b78
  ldr r2, =_sbss
 8000c38:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c3c:	20000230 	.word	0x20000230

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f931 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fefa 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f93b 	bl	8000f22 <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f911 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200000e4 	.word	0x200000e4

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200000e4 	.word	0x200000e4

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	@ (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	@ 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff47 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff5c 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff8e 	bl	8000e28 <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffb0 	bl	8000e90 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e16b      	b.n	8001230 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 815a 	bne.w	800122a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80b4 	beq.w	800122a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b60      	ldr	r3, [pc, #384]	@ (8001248 <HAL_GPIO_Init+0x30c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001248 <HAL_GPIO_Init+0x30c>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001248 <HAL_GPIO_Init+0x30c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010de:	4a5b      	ldr	r2, [pc, #364]	@ (800124c <HAL_GPIO_Init+0x310>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a52      	ldr	r2, [pc, #328]	@ (8001250 <HAL_GPIO_Init+0x314>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d02b      	beq.n	8001162 <HAL_GPIO_Init+0x226>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a51      	ldr	r2, [pc, #324]	@ (8001254 <HAL_GPIO_Init+0x318>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d025      	beq.n	800115e <HAL_GPIO_Init+0x222>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a50      	ldr	r2, [pc, #320]	@ (8001258 <HAL_GPIO_Init+0x31c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d01f      	beq.n	800115a <HAL_GPIO_Init+0x21e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4f      	ldr	r2, [pc, #316]	@ (800125c <HAL_GPIO_Init+0x320>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x21a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4e      	ldr	r2, [pc, #312]	@ (8001260 <HAL_GPIO_Init+0x324>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x216>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4d      	ldr	r2, [pc, #308]	@ (8001264 <HAL_GPIO_Init+0x328>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x212>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4c      	ldr	r2, [pc, #304]	@ (8001268 <HAL_GPIO_Init+0x32c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x20e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4b      	ldr	r2, [pc, #300]	@ (800126c <HAL_GPIO_Init+0x330>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x20a>
 8001142:	2307      	movs	r3, #7
 8001144:	e00e      	b.n	8001164 <HAL_GPIO_Init+0x228>
 8001146:	2308      	movs	r3, #8
 8001148:	e00c      	b.n	8001164 <HAL_GPIO_Init+0x228>
 800114a:	2306      	movs	r3, #6
 800114c:	e00a      	b.n	8001164 <HAL_GPIO_Init+0x228>
 800114e:	2305      	movs	r3, #5
 8001150:	e008      	b.n	8001164 <HAL_GPIO_Init+0x228>
 8001152:	2304      	movs	r3, #4
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x228>
 8001156:	2303      	movs	r3, #3
 8001158:	e004      	b.n	8001164 <HAL_GPIO_Init+0x228>
 800115a:	2302      	movs	r3, #2
 800115c:	e002      	b.n	8001164 <HAL_GPIO_Init+0x228>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x228>
 8001162:	2300      	movs	r3, #0
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	f002 0203 	and.w	r2, r2, #3
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	4093      	lsls	r3, r2
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001174:	4935      	ldr	r1, [pc, #212]	@ (800124c <HAL_GPIO_Init+0x310>)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001182:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <HAL_GPIO_Init+0x334>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a6:	4a32      	ldr	r2, [pc, #200]	@ (8001270 <HAL_GPIO_Init+0x334>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ac:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <HAL_GPIO_Init+0x334>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d0:	4a27      	ldr	r2, [pc, #156]	@ (8001270 <HAL_GPIO_Init+0x334>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d6:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <HAL_GPIO_Init+0x334>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <HAL_GPIO_Init+0x334>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <HAL_GPIO_Init+0x334>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001224:	4a12      	ldr	r2, [pc, #72]	@ (8001270 <HAL_GPIO_Init+0x334>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3301      	adds	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2b0f      	cmp	r3, #15
 8001234:	f67f ae90 	bls.w	8000f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40013800 	.word	0x40013800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40021000 	.word	0x40021000
 8001264:	40021400 	.word	0x40021400
 8001268:	40021800 	.word	0x40021800
 800126c:	40021c00 	.word	0x40021c00
 8001270:	40013c00 	.word	0x40013c00

08001274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e001      	b.n	8001296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	619a      	str	r2, [r3, #24]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e267      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d075      	beq.n	80013e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012f6:	4b88      	ldr	r3, [pc, #544]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d00c      	beq.n	800131c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001302:	4b85      	ldr	r3, [pc, #532]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800130a:	2b08      	cmp	r3, #8
 800130c:	d112      	bne.n	8001334 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130e:	4b82      	ldr	r3, [pc, #520]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001316:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800131a:	d10b      	bne.n	8001334 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	4b7e      	ldr	r3, [pc, #504]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d05b      	beq.n	80013e0 <HAL_RCC_OscConfig+0x108>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d157      	bne.n	80013e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e242      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800133c:	d106      	bne.n	800134c <HAL_RCC_OscConfig+0x74>
 800133e:	4b76      	ldr	r3, [pc, #472]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a75      	ldr	r2, [pc, #468]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e01d      	b.n	8001388 <HAL_RCC_OscConfig+0xb0>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x98>
 8001356:	4b70      	ldr	r3, [pc, #448]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a6f      	ldr	r2, [pc, #444]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 800135c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b6d      	ldr	r3, [pc, #436]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a6c      	ldr	r2, [pc, #432]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e00b      	b.n	8001388 <HAL_RCC_OscConfig+0xb0>
 8001370:	4b69      	ldr	r3, [pc, #420]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a68      	ldr	r2, [pc, #416]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b66      	ldr	r3, [pc, #408]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a65      	ldr	r2, [pc, #404]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d013      	beq.n	80013b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fcbe 	bl	8000d10 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fcba 	bl	8000d10 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	@ 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e207      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0xc0>
 80013b6:	e014      	b.n	80013e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fcaa 	bl	8000d10 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fca6 	bl	8000d10 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	@ 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e1f3      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	4b51      	ldr	r3, [pc, #324]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0xe8>
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d063      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fa:	4b47      	ldr	r3, [pc, #284]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001402:	2b08      	cmp	r3, #8
 8001404:	d11c      	bne.n	8001440 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001406:	4b44      	ldr	r3, [pc, #272]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d116      	bne.n	8001440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x152>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d001      	beq.n	800142a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e1c7      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142a:	4b3b      	ldr	r3, [pc, #236]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4937      	ldr	r1, [pc, #220]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	e03a      	b.n	80014b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d020      	beq.n	800148a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001448:	4b34      	ldr	r3, [pc, #208]	@ (800151c <HAL_RCC_OscConfig+0x244>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144e:	f7ff fc5f 	bl	8000d10 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fc5b 	bl	8000d10 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e1a8      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	4b2b      	ldr	r3, [pc, #172]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4925      	ldr	r1, [pc, #148]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
 8001488:	e015      	b.n	80014b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148a:	4b24      	ldr	r3, [pc, #144]	@ (800151c <HAL_RCC_OscConfig+0x244>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fc3e 	bl	8000d10 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff fc3a 	bl	8000d10 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e187      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d036      	beq.n	8001530 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d016      	beq.n	80014f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <HAL_RCC_OscConfig+0x248>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d0:	f7ff fc1e 	bl	8000d10 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fc1a 	bl	8000d10 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e167      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <HAL_RCC_OscConfig+0x240>)
 80014ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x200>
 80014f6:	e01b      	b.n	8001530 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <HAL_RCC_OscConfig+0x248>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fc07 	bl	8000d10 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	e00e      	b.n	8001524 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fc03 	bl	8000d10 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d907      	bls.n	8001524 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e150      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
 8001518:	40023800 	.word	0x40023800
 800151c:	42470000 	.word	0x42470000
 8001520:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001524:	4b88      	ldr	r3, [pc, #544]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1ea      	bne.n	8001506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8097 	beq.w	800166c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001542:	4b81      	ldr	r3, [pc, #516]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10f      	bne.n	800156e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	4b7d      	ldr	r3, [pc, #500]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	4a7c      	ldr	r2, [pc, #496]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	@ 0x40
 800155e:	4b7a      	ldr	r3, [pc, #488]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800156a:	2301      	movs	r3, #1
 800156c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156e:	4b77      	ldr	r3, [pc, #476]	@ (800174c <HAL_RCC_OscConfig+0x474>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d118      	bne.n	80015ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800157a:	4b74      	ldr	r3, [pc, #464]	@ (800174c <HAL_RCC_OscConfig+0x474>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a73      	ldr	r2, [pc, #460]	@ (800174c <HAL_RCC_OscConfig+0x474>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001586:	f7ff fbc3 	bl	8000d10 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff fbbf 	bl	8000d10 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e10c      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	4b6a      	ldr	r3, [pc, #424]	@ (800174c <HAL_RCC_OscConfig+0x474>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x2ea>
 80015b4:	4b64      	ldr	r3, [pc, #400]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b8:	4a63      	ldr	r2, [pc, #396]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c0:	e01c      	b.n	80015fc <HAL_RCC_OscConfig+0x324>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x30c>
 80015ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015da:	4a5b      	ldr	r2, [pc, #364]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0x324>
 80015e4:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e8:	4a57      	ldr	r2, [pc, #348]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f0:	4b55      	ldr	r3, [pc, #340]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f4:	4a54      	ldr	r2, [pc, #336]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80015f6:	f023 0304 	bic.w	r3, r3, #4
 80015fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d015      	beq.n	8001630 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff fb84 	bl	8000d10 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160a:	e00a      	b.n	8001622 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff fb80 	bl	8000d10 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e0cb      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001622:	4b49      	ldr	r3, [pc, #292]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0ee      	beq.n	800160c <HAL_RCC_OscConfig+0x334>
 800162e:	e014      	b.n	800165a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fb6e 	bl	8000d10 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001636:	e00a      	b.n	800164e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001638:	f7ff fb6a 	bl	8000d10 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e0b5      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164e:	4b3e      	ldr	r3, [pc, #248]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1ee      	bne.n	8001638 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001660:	4b39      	ldr	r3, [pc, #228]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	4a38      	ldr	r2, [pc, #224]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800166a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80a1 	beq.w	80017b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001676:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d05c      	beq.n	800173c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d141      	bne.n	800170e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <HAL_RCC_OscConfig+0x478>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb3e 	bl	8000d10 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb3a 	bl	8000d10 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e087      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c4:	019b      	lsls	r3, r3, #6
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	3b01      	subs	r3, #1
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	491b      	ldr	r1, [pc, #108]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_RCC_OscConfig+0x478>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fb13 	bl	8000d10 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fb0f 	bl	8000d10 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e05c      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x416>
 800170c:	e054      	b.n	80017b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <HAL_RCC_OscConfig+0x478>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fafc 	bl	8000d10 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff faf8 	bl	8000d10 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e045      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_RCC_OscConfig+0x470>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x444>
 800173a:	e03d      	b.n	80017b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d107      	bne.n	8001754 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e038      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000
 8001750:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001754:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <HAL_RCC_OscConfig+0x4ec>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d028      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d121      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d11a      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800178a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800178c:	4293      	cmp	r3, r2
 800178e:	d111      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179a:	085b      	lsrs	r3, r3, #1
 800179c:	3b01      	subs	r3, #1
 800179e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0cc      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017dc:	4b68      	ldr	r3, [pc, #416]	@ (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d90c      	bls.n	8001804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b65      	ldr	r3, [pc, #404]	@ (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b63      	ldr	r3, [pc, #396]	@ (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0b8      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800181c:	4b59      	ldr	r3, [pc, #356]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a58      	ldr	r2, [pc, #352]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001826:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001834:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a52      	ldr	r2, [pc, #328]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800183e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b50      	ldr	r3, [pc, #320]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	494d      	ldr	r1, [pc, #308]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d044      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b47      	ldr	r3, [pc, #284]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d119      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e07f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d003      	beq.n	8001886 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001882:	2b03      	cmp	r3, #3
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001886:	4b3f      	ldr	r3, [pc, #252]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e06f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	4b3b      	ldr	r3, [pc, #236]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e067      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a6:	4b37      	ldr	r3, [pc, #220]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f023 0203 	bic.w	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4934      	ldr	r1, [pc, #208]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b8:	f7ff fa2a 	bl	8000d10 <HAL_GetTick>
 80018bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c0:	f7ff fa26 	bl	8000d10 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e04f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 020c 	and.w	r2, r3, #12
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d1eb      	bne.n	80018c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e8:	4b25      	ldr	r3, [pc, #148]	@ (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d20c      	bcs.n	8001910 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e032      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4916      	ldr	r1, [pc, #88]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	490e      	ldr	r1, [pc, #56]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800194e:	f000 f821 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8001952:	4602      	mov	r2, r0
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	490a      	ldr	r1, [pc, #40]	@ (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	5ccb      	ldrb	r3, [r1, r3]
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	4a09      	ldr	r2, [pc, #36]	@ (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f98a 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023c00 	.word	0x40023c00
 8001984:	40023800 	.word	0x40023800
 8001988:	08002b24 	.word	0x08002b24
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001998:	b090      	sub	sp, #64	@ 0x40
 800199a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ac:	4b59      	ldr	r3, [pc, #356]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d00d      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x40>
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	f200 80a1 	bhi.w	8001b00 <HAL_RCC_GetSysClockFreq+0x16c>
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x34>
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x3a>
 80019c6:	e09b      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b53      	ldr	r3, [pc, #332]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x184>)
 80019ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019cc:	e09b      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ce:	4b53      	ldr	r3, [pc, #332]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x188>)
 80019d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019d2:	e098      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019de:	4b4d      	ldr	r3, [pc, #308]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d028      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	099b      	lsrs	r3, r3, #6
 80019f0:	2200      	movs	r2, #0
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019fc:	2100      	movs	r1, #0
 80019fe:	4b47      	ldr	r3, [pc, #284]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a00:	fb03 f201 	mul.w	r2, r3, r1
 8001a04:	2300      	movs	r3, #0
 8001a06:	fb00 f303 	mul.w	r3, r0, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a43      	ldr	r2, [pc, #268]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a0e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a14:	460a      	mov	r2, r1
 8001a16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a1a:	4413      	add	r3, r2
 8001a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a20:	2200      	movs	r2, #0
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	61fa      	str	r2, [r7, #28]
 8001a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a2e:	f7fe fc1f 	bl	8000270 <__aeabi_uldivmod>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4613      	mov	r3, r2
 8001a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a3a:	e053      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3c:	4b35      	ldr	r3, [pc, #212]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	2200      	movs	r2, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	617a      	str	r2, [r7, #20]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a4e:	f04f 0b00 	mov.w	fp, #0
 8001a52:	4652      	mov	r2, sl
 8001a54:	465b      	mov	r3, fp
 8001a56:	f04f 0000 	mov.w	r0, #0
 8001a5a:	f04f 0100 	mov.w	r1, #0
 8001a5e:	0159      	lsls	r1, r3, #5
 8001a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a64:	0150      	lsls	r0, r2, #5
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a6e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a86:	ebb2 0408 	subs.w	r4, r2, r8
 8001a8a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	00eb      	lsls	r3, r5, #3
 8001a98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a9c:	00e2      	lsls	r2, r4, #3
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	eb14 030a 	adds.w	r3, r4, sl
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	eb45 030b 	adc.w	r3, r5, fp
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aba:	4629      	mov	r1, r5
 8001abc:	028b      	lsls	r3, r1, #10
 8001abe:	4621      	mov	r1, r4
 8001ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	028a      	lsls	r2, r1, #10
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	60fa      	str	r2, [r7, #12]
 8001ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ad8:	f7fe fbca 	bl	8000270 <__aeabi_uldivmod>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	3301      	adds	r3, #1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001af4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001afe:	e002      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3740      	adds	r7, #64	@ 0x40
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	017d7840 	.word	0x017d7840

08001b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e041      	b.n	8001bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe ffba 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f000 f95e 	bl	8001e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d001      	beq.n	8001bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e046      	b.n	8001c66 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a23      	ldr	r2, [pc, #140]	@ (8001c74 <HAL_TIM_Base_Start+0xb4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d022      	beq.n	8001c30 <HAL_TIM_Base_Start+0x70>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf2:	d01d      	beq.n	8001c30 <HAL_TIM_Base_Start+0x70>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c78 <HAL_TIM_Base_Start+0xb8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d018      	beq.n	8001c30 <HAL_TIM_Base_Start+0x70>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <HAL_TIM_Base_Start+0xbc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d013      	beq.n	8001c30 <HAL_TIM_Base_Start+0x70>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c80 <HAL_TIM_Base_Start+0xc0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00e      	beq.n	8001c30 <HAL_TIM_Base_Start+0x70>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1b      	ldr	r2, [pc, #108]	@ (8001c84 <HAL_TIM_Base_Start+0xc4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d009      	beq.n	8001c30 <HAL_TIM_Base_Start+0x70>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	@ (8001c88 <HAL_TIM_Base_Start+0xc8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_TIM_Base_Start+0x70>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a18      	ldr	r2, [pc, #96]	@ (8001c8c <HAL_TIM_Base_Start+0xcc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d111      	bne.n	8001c54 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d010      	beq.n	8001c64 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0201 	orr.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c52:	e007      	b.n	8001c64 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40010000 	.word	0x40010000
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	40000c00 	.word	0x40000c00
 8001c84:	40010400 	.word	0x40010400
 8001c88:	40014000 	.word	0x40014000
 8001c8c:	40001800 	.word	0x40001800

08001c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_TIM_ConfigClockSource+0x1c>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e0b4      	b.n	8001e16 <HAL_TIM_ConfigClockSource+0x186>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ce4:	d03e      	beq.n	8001d64 <HAL_TIM_ConfigClockSource+0xd4>
 8001ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cea:	f200 8087 	bhi.w	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cf2:	f000 8086 	beq.w	8001e02 <HAL_TIM_ConfigClockSource+0x172>
 8001cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cfa:	d87f      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001cfc:	2b70      	cmp	r3, #112	@ 0x70
 8001cfe:	d01a      	beq.n	8001d36 <HAL_TIM_ConfigClockSource+0xa6>
 8001d00:	2b70      	cmp	r3, #112	@ 0x70
 8001d02:	d87b      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d04:	2b60      	cmp	r3, #96	@ 0x60
 8001d06:	d050      	beq.n	8001daa <HAL_TIM_ConfigClockSource+0x11a>
 8001d08:	2b60      	cmp	r3, #96	@ 0x60
 8001d0a:	d877      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d0c:	2b50      	cmp	r3, #80	@ 0x50
 8001d0e:	d03c      	beq.n	8001d8a <HAL_TIM_ConfigClockSource+0xfa>
 8001d10:	2b50      	cmp	r3, #80	@ 0x50
 8001d12:	d873      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d14:	2b40      	cmp	r3, #64	@ 0x40
 8001d16:	d058      	beq.n	8001dca <HAL_TIM_ConfigClockSource+0x13a>
 8001d18:	2b40      	cmp	r3, #64	@ 0x40
 8001d1a:	d86f      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d1c:	2b30      	cmp	r3, #48	@ 0x30
 8001d1e:	d064      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0x15a>
 8001d20:	2b30      	cmp	r3, #48	@ 0x30
 8001d22:	d86b      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d060      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0x15a>
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d867      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d05c      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0x15a>
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d05a      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0x15a>
 8001d34:	e062      	b.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d46:	f000 f991 	bl	800206c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	609a      	str	r2, [r3, #8]
      break;
 8001d62:	e04f      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d74:	f000 f97a 	bl	800206c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d86:	609a      	str	r2, [r3, #8]
      break;
 8001d88:	e03c      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d96:	461a      	mov	r2, r3
 8001d98:	f000 f8ee 	bl	8001f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2150      	movs	r1, #80	@ 0x50
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f947 	bl	8002036 <TIM_ITRx_SetConfig>
      break;
 8001da8:	e02c      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001db6:	461a      	mov	r2, r3
 8001db8:	f000 f90d 	bl	8001fd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2160      	movs	r1, #96	@ 0x60
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f937 	bl	8002036 <TIM_ITRx_SetConfig>
      break;
 8001dc8:	e01c      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f000 f8ce 	bl	8001f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2140      	movs	r1, #64	@ 0x40
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f927 	bl	8002036 <TIM_ITRx_SetConfig>
      break;
 8001de8:	e00c      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	4610      	mov	r0, r2
 8001df6:	f000 f91e 	bl	8002036 <TIM_ITRx_SetConfig>
      break;
 8001dfa:	e003      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001e00:	e000      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a46      	ldr	r2, [pc, #280]	@ (8001f4c <TIM_Base_SetConfig+0x12c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <TIM_Base_SetConfig+0x40>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3e:	d00f      	beq.n	8001e60 <TIM_Base_SetConfig+0x40>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a43      	ldr	r2, [pc, #268]	@ (8001f50 <TIM_Base_SetConfig+0x130>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00b      	beq.n	8001e60 <TIM_Base_SetConfig+0x40>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a42      	ldr	r2, [pc, #264]	@ (8001f54 <TIM_Base_SetConfig+0x134>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <TIM_Base_SetConfig+0x40>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a41      	ldr	r2, [pc, #260]	@ (8001f58 <TIM_Base_SetConfig+0x138>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <TIM_Base_SetConfig+0x40>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a40      	ldr	r2, [pc, #256]	@ (8001f5c <TIM_Base_SetConfig+0x13c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a35      	ldr	r2, [pc, #212]	@ (8001f4c <TIM_Base_SetConfig+0x12c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d02b      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e80:	d027      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a32      	ldr	r2, [pc, #200]	@ (8001f50 <TIM_Base_SetConfig+0x130>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d023      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a31      	ldr	r2, [pc, #196]	@ (8001f54 <TIM_Base_SetConfig+0x134>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01f      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a30      	ldr	r2, [pc, #192]	@ (8001f58 <TIM_Base_SetConfig+0x138>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01b      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f5c <TIM_Base_SetConfig+0x13c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d017      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a2e      	ldr	r2, [pc, #184]	@ (8001f60 <TIM_Base_SetConfig+0x140>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a2d      	ldr	r2, [pc, #180]	@ (8001f64 <TIM_Base_SetConfig+0x144>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00f      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8001f68 <TIM_Base_SetConfig+0x148>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00b      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8001f6c <TIM_Base_SetConfig+0x14c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8001f70 <TIM_Base_SetConfig+0x150>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d003      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a29      	ldr	r2, [pc, #164]	@ (8001f74 <TIM_Base_SetConfig+0x154>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d108      	bne.n	8001ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a10      	ldr	r2, [pc, #64]	@ (8001f4c <TIM_Base_SetConfig+0x12c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d003      	beq.n	8001f18 <TIM_Base_SetConfig+0xf8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <TIM_Base_SetConfig+0x13c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d103      	bne.n	8001f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f023 0201 	bic.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40000400 	.word	0x40000400
 8001f54:	40000800 	.word	0x40000800
 8001f58:	40000c00 	.word	0x40000c00
 8001f5c:	40010400 	.word	0x40010400
 8001f60:	40014000 	.word	0x40014000
 8001f64:	40014400 	.word	0x40014400
 8001f68:	40014800 	.word	0x40014800
 8001f6c:	40001800 	.word	0x40001800
 8001f70:	40001c00 	.word	0x40001c00
 8001f74:	40002000 	.word	0x40002000

08001f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	f023 0201 	bic.w	r2, r3, #1
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f023 030a 	bic.w	r3, r3, #10
 8001fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	621a      	str	r2, [r3, #32]
}
 8001fca:	bf00      	nop
 8001fcc:	371c      	adds	r7, #28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b087      	sub	sp, #28
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f023 0210 	bic.w	r2, r3, #16
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002000:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	031b      	lsls	r3, r3, #12
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002012:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	621a      	str	r2, [r3, #32]
}
 800202a:	bf00      	nop
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800204c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	f043 0307 	orr.w	r3, r3, #7
 8002058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	021a      	lsls	r2, r3, #8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	431a      	orrs	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	609a      	str	r2, [r3, #8]
}
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e05a      	b.n	800217a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a21      	ldr	r2, [pc, #132]	@ (8002188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d022      	beq.n	800214e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002110:	d01d      	beq.n	800214e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1d      	ldr	r2, [pc, #116]	@ (800218c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d018      	beq.n	800214e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1b      	ldr	r2, [pc, #108]	@ (8002190 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1a      	ldr	r2, [pc, #104]	@ (8002194 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00e      	beq.n	800214e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d009      	beq.n	800214e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a17      	ldr	r2, [pc, #92]	@ (800219c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d004      	beq.n	800214e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a15      	ldr	r2, [pc, #84]	@ (80021a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d10c      	bne.n	8002168 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	4313      	orrs	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40010000 	.word	0x40010000
 800218c:	40000400 	.word	0x40000400
 8002190:	40000800 	.word	0x40000800
 8002194:	40000c00 	.word	0x40000c00
 8002198:	40010400 	.word	0x40010400
 800219c:	40014000 	.word	0x40014000
 80021a0:	40001800 	.word	0x40001800

080021a4 <siprintf>:
 80021a4:	b40e      	push	{r1, r2, r3}
 80021a6:	b500      	push	{lr}
 80021a8:	b09c      	sub	sp, #112	@ 0x70
 80021aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80021ac:	9002      	str	r0, [sp, #8]
 80021ae:	9006      	str	r0, [sp, #24]
 80021b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80021b4:	4809      	ldr	r0, [pc, #36]	@ (80021dc <siprintf+0x38>)
 80021b6:	9107      	str	r1, [sp, #28]
 80021b8:	9104      	str	r1, [sp, #16]
 80021ba:	4909      	ldr	r1, [pc, #36]	@ (80021e0 <siprintf+0x3c>)
 80021bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80021c0:	9105      	str	r1, [sp, #20]
 80021c2:	6800      	ldr	r0, [r0, #0]
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	a902      	add	r1, sp, #8
 80021c8:	f000 f994 	bl	80024f4 <_svfiprintf_r>
 80021cc:	9b02      	ldr	r3, [sp, #8]
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	b01c      	add	sp, #112	@ 0x70
 80021d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80021d8:	b003      	add	sp, #12
 80021da:	4770      	bx	lr
 80021dc:	2000000c 	.word	0x2000000c
 80021e0:	ffff0208 	.word	0xffff0208

080021e4 <memset>:
 80021e4:	4402      	add	r2, r0
 80021e6:	4603      	mov	r3, r0
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d100      	bne.n	80021ee <memset+0xa>
 80021ec:	4770      	bx	lr
 80021ee:	f803 1b01 	strb.w	r1, [r3], #1
 80021f2:	e7f9      	b.n	80021e8 <memset+0x4>

080021f4 <__errno>:
 80021f4:	4b01      	ldr	r3, [pc, #4]	@ (80021fc <__errno+0x8>)
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	2000000c 	.word	0x2000000c

08002200 <__libc_init_array>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	4d0d      	ldr	r5, [pc, #52]	@ (8002238 <__libc_init_array+0x38>)
 8002204:	4c0d      	ldr	r4, [pc, #52]	@ (800223c <__libc_init_array+0x3c>)
 8002206:	1b64      	subs	r4, r4, r5
 8002208:	10a4      	asrs	r4, r4, #2
 800220a:	2600      	movs	r6, #0
 800220c:	42a6      	cmp	r6, r4
 800220e:	d109      	bne.n	8002224 <__libc_init_array+0x24>
 8002210:	4d0b      	ldr	r5, [pc, #44]	@ (8002240 <__libc_init_array+0x40>)
 8002212:	4c0c      	ldr	r4, [pc, #48]	@ (8002244 <__libc_init_array+0x44>)
 8002214:	f000 fc66 	bl	8002ae4 <_init>
 8002218:	1b64      	subs	r4, r4, r5
 800221a:	10a4      	asrs	r4, r4, #2
 800221c:	2600      	movs	r6, #0
 800221e:	42a6      	cmp	r6, r4
 8002220:	d105      	bne.n	800222e <__libc_init_array+0x2e>
 8002222:	bd70      	pop	{r4, r5, r6, pc}
 8002224:	f855 3b04 	ldr.w	r3, [r5], #4
 8002228:	4798      	blx	r3
 800222a:	3601      	adds	r6, #1
 800222c:	e7ee      	b.n	800220c <__libc_init_array+0xc>
 800222e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002232:	4798      	blx	r3
 8002234:	3601      	adds	r6, #1
 8002236:	e7f2      	b.n	800221e <__libc_init_array+0x1e>
 8002238:	08002b70 	.word	0x08002b70
 800223c:	08002b70 	.word	0x08002b70
 8002240:	08002b70 	.word	0x08002b70
 8002244:	08002b74 	.word	0x08002b74

08002248 <__retarget_lock_acquire_recursive>:
 8002248:	4770      	bx	lr

0800224a <__retarget_lock_release_recursive>:
 800224a:	4770      	bx	lr

0800224c <_free_r>:
 800224c:	b538      	push	{r3, r4, r5, lr}
 800224e:	4605      	mov	r5, r0
 8002250:	2900      	cmp	r1, #0
 8002252:	d041      	beq.n	80022d8 <_free_r+0x8c>
 8002254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002258:	1f0c      	subs	r4, r1, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	bfb8      	it	lt
 800225e:	18e4      	addlt	r4, r4, r3
 8002260:	f000 f8e0 	bl	8002424 <__malloc_lock>
 8002264:	4a1d      	ldr	r2, [pc, #116]	@ (80022dc <_free_r+0x90>)
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	b933      	cbnz	r3, 8002278 <_free_r+0x2c>
 800226a:	6063      	str	r3, [r4, #4]
 800226c:	6014      	str	r4, [r2, #0]
 800226e:	4628      	mov	r0, r5
 8002270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002274:	f000 b8dc 	b.w	8002430 <__malloc_unlock>
 8002278:	42a3      	cmp	r3, r4
 800227a:	d908      	bls.n	800228e <_free_r+0x42>
 800227c:	6820      	ldr	r0, [r4, #0]
 800227e:	1821      	adds	r1, r4, r0
 8002280:	428b      	cmp	r3, r1
 8002282:	bf01      	itttt	eq
 8002284:	6819      	ldreq	r1, [r3, #0]
 8002286:	685b      	ldreq	r3, [r3, #4]
 8002288:	1809      	addeq	r1, r1, r0
 800228a:	6021      	streq	r1, [r4, #0]
 800228c:	e7ed      	b.n	800226a <_free_r+0x1e>
 800228e:	461a      	mov	r2, r3
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	b10b      	cbz	r3, 8002298 <_free_r+0x4c>
 8002294:	42a3      	cmp	r3, r4
 8002296:	d9fa      	bls.n	800228e <_free_r+0x42>
 8002298:	6811      	ldr	r1, [r2, #0]
 800229a:	1850      	adds	r0, r2, r1
 800229c:	42a0      	cmp	r0, r4
 800229e:	d10b      	bne.n	80022b8 <_free_r+0x6c>
 80022a0:	6820      	ldr	r0, [r4, #0]
 80022a2:	4401      	add	r1, r0
 80022a4:	1850      	adds	r0, r2, r1
 80022a6:	4283      	cmp	r3, r0
 80022a8:	6011      	str	r1, [r2, #0]
 80022aa:	d1e0      	bne.n	800226e <_free_r+0x22>
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	6053      	str	r3, [r2, #4]
 80022b2:	4408      	add	r0, r1
 80022b4:	6010      	str	r0, [r2, #0]
 80022b6:	e7da      	b.n	800226e <_free_r+0x22>
 80022b8:	d902      	bls.n	80022c0 <_free_r+0x74>
 80022ba:	230c      	movs	r3, #12
 80022bc:	602b      	str	r3, [r5, #0]
 80022be:	e7d6      	b.n	800226e <_free_r+0x22>
 80022c0:	6820      	ldr	r0, [r4, #0]
 80022c2:	1821      	adds	r1, r4, r0
 80022c4:	428b      	cmp	r3, r1
 80022c6:	bf04      	itt	eq
 80022c8:	6819      	ldreq	r1, [r3, #0]
 80022ca:	685b      	ldreq	r3, [r3, #4]
 80022cc:	6063      	str	r3, [r4, #4]
 80022ce:	bf04      	itt	eq
 80022d0:	1809      	addeq	r1, r1, r0
 80022d2:	6021      	streq	r1, [r4, #0]
 80022d4:	6054      	str	r4, [r2, #4]
 80022d6:	e7ca      	b.n	800226e <_free_r+0x22>
 80022d8:	bd38      	pop	{r3, r4, r5, pc}
 80022da:	bf00      	nop
 80022dc:	2000022c 	.word	0x2000022c

080022e0 <sbrk_aligned>:
 80022e0:	b570      	push	{r4, r5, r6, lr}
 80022e2:	4e0f      	ldr	r6, [pc, #60]	@ (8002320 <sbrk_aligned+0x40>)
 80022e4:	460c      	mov	r4, r1
 80022e6:	6831      	ldr	r1, [r6, #0]
 80022e8:	4605      	mov	r5, r0
 80022ea:	b911      	cbnz	r1, 80022f2 <sbrk_aligned+0x12>
 80022ec:	f000 fba6 	bl	8002a3c <_sbrk_r>
 80022f0:	6030      	str	r0, [r6, #0]
 80022f2:	4621      	mov	r1, r4
 80022f4:	4628      	mov	r0, r5
 80022f6:	f000 fba1 	bl	8002a3c <_sbrk_r>
 80022fa:	1c43      	adds	r3, r0, #1
 80022fc:	d103      	bne.n	8002306 <sbrk_aligned+0x26>
 80022fe:	f04f 34ff 	mov.w	r4, #4294967295
 8002302:	4620      	mov	r0, r4
 8002304:	bd70      	pop	{r4, r5, r6, pc}
 8002306:	1cc4      	adds	r4, r0, #3
 8002308:	f024 0403 	bic.w	r4, r4, #3
 800230c:	42a0      	cmp	r0, r4
 800230e:	d0f8      	beq.n	8002302 <sbrk_aligned+0x22>
 8002310:	1a21      	subs	r1, r4, r0
 8002312:	4628      	mov	r0, r5
 8002314:	f000 fb92 	bl	8002a3c <_sbrk_r>
 8002318:	3001      	adds	r0, #1
 800231a:	d1f2      	bne.n	8002302 <sbrk_aligned+0x22>
 800231c:	e7ef      	b.n	80022fe <sbrk_aligned+0x1e>
 800231e:	bf00      	nop
 8002320:	20000228 	.word	0x20000228

08002324 <_malloc_r>:
 8002324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002328:	1ccd      	adds	r5, r1, #3
 800232a:	f025 0503 	bic.w	r5, r5, #3
 800232e:	3508      	adds	r5, #8
 8002330:	2d0c      	cmp	r5, #12
 8002332:	bf38      	it	cc
 8002334:	250c      	movcc	r5, #12
 8002336:	2d00      	cmp	r5, #0
 8002338:	4606      	mov	r6, r0
 800233a:	db01      	blt.n	8002340 <_malloc_r+0x1c>
 800233c:	42a9      	cmp	r1, r5
 800233e:	d904      	bls.n	800234a <_malloc_r+0x26>
 8002340:	230c      	movs	r3, #12
 8002342:	6033      	str	r3, [r6, #0]
 8002344:	2000      	movs	r0, #0
 8002346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800234a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002420 <_malloc_r+0xfc>
 800234e:	f000 f869 	bl	8002424 <__malloc_lock>
 8002352:	f8d8 3000 	ldr.w	r3, [r8]
 8002356:	461c      	mov	r4, r3
 8002358:	bb44      	cbnz	r4, 80023ac <_malloc_r+0x88>
 800235a:	4629      	mov	r1, r5
 800235c:	4630      	mov	r0, r6
 800235e:	f7ff ffbf 	bl	80022e0 <sbrk_aligned>
 8002362:	1c43      	adds	r3, r0, #1
 8002364:	4604      	mov	r4, r0
 8002366:	d158      	bne.n	800241a <_malloc_r+0xf6>
 8002368:	f8d8 4000 	ldr.w	r4, [r8]
 800236c:	4627      	mov	r7, r4
 800236e:	2f00      	cmp	r7, #0
 8002370:	d143      	bne.n	80023fa <_malloc_r+0xd6>
 8002372:	2c00      	cmp	r4, #0
 8002374:	d04b      	beq.n	800240e <_malloc_r+0xea>
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	4639      	mov	r1, r7
 800237a:	4630      	mov	r0, r6
 800237c:	eb04 0903 	add.w	r9, r4, r3
 8002380:	f000 fb5c 	bl	8002a3c <_sbrk_r>
 8002384:	4581      	cmp	r9, r0
 8002386:	d142      	bne.n	800240e <_malloc_r+0xea>
 8002388:	6821      	ldr	r1, [r4, #0]
 800238a:	1a6d      	subs	r5, r5, r1
 800238c:	4629      	mov	r1, r5
 800238e:	4630      	mov	r0, r6
 8002390:	f7ff ffa6 	bl	80022e0 <sbrk_aligned>
 8002394:	3001      	adds	r0, #1
 8002396:	d03a      	beq.n	800240e <_malloc_r+0xea>
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	442b      	add	r3, r5
 800239c:	6023      	str	r3, [r4, #0]
 800239e:	f8d8 3000 	ldr.w	r3, [r8]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	bb62      	cbnz	r2, 8002400 <_malloc_r+0xdc>
 80023a6:	f8c8 7000 	str.w	r7, [r8]
 80023aa:	e00f      	b.n	80023cc <_malloc_r+0xa8>
 80023ac:	6822      	ldr	r2, [r4, #0]
 80023ae:	1b52      	subs	r2, r2, r5
 80023b0:	d420      	bmi.n	80023f4 <_malloc_r+0xd0>
 80023b2:	2a0b      	cmp	r2, #11
 80023b4:	d917      	bls.n	80023e6 <_malloc_r+0xc2>
 80023b6:	1961      	adds	r1, r4, r5
 80023b8:	42a3      	cmp	r3, r4
 80023ba:	6025      	str	r5, [r4, #0]
 80023bc:	bf18      	it	ne
 80023be:	6059      	strne	r1, [r3, #4]
 80023c0:	6863      	ldr	r3, [r4, #4]
 80023c2:	bf08      	it	eq
 80023c4:	f8c8 1000 	streq.w	r1, [r8]
 80023c8:	5162      	str	r2, [r4, r5]
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	4630      	mov	r0, r6
 80023ce:	f000 f82f 	bl	8002430 <__malloc_unlock>
 80023d2:	f104 000b 	add.w	r0, r4, #11
 80023d6:	1d23      	adds	r3, r4, #4
 80023d8:	f020 0007 	bic.w	r0, r0, #7
 80023dc:	1ac2      	subs	r2, r0, r3
 80023de:	bf1c      	itt	ne
 80023e0:	1a1b      	subne	r3, r3, r0
 80023e2:	50a3      	strne	r3, [r4, r2]
 80023e4:	e7af      	b.n	8002346 <_malloc_r+0x22>
 80023e6:	6862      	ldr	r2, [r4, #4]
 80023e8:	42a3      	cmp	r3, r4
 80023ea:	bf0c      	ite	eq
 80023ec:	f8c8 2000 	streq.w	r2, [r8]
 80023f0:	605a      	strne	r2, [r3, #4]
 80023f2:	e7eb      	b.n	80023cc <_malloc_r+0xa8>
 80023f4:	4623      	mov	r3, r4
 80023f6:	6864      	ldr	r4, [r4, #4]
 80023f8:	e7ae      	b.n	8002358 <_malloc_r+0x34>
 80023fa:	463c      	mov	r4, r7
 80023fc:	687f      	ldr	r7, [r7, #4]
 80023fe:	e7b6      	b.n	800236e <_malloc_r+0x4a>
 8002400:	461a      	mov	r2, r3
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	42a3      	cmp	r3, r4
 8002406:	d1fb      	bne.n	8002400 <_malloc_r+0xdc>
 8002408:	2300      	movs	r3, #0
 800240a:	6053      	str	r3, [r2, #4]
 800240c:	e7de      	b.n	80023cc <_malloc_r+0xa8>
 800240e:	230c      	movs	r3, #12
 8002410:	6033      	str	r3, [r6, #0]
 8002412:	4630      	mov	r0, r6
 8002414:	f000 f80c 	bl	8002430 <__malloc_unlock>
 8002418:	e794      	b.n	8002344 <_malloc_r+0x20>
 800241a:	6005      	str	r5, [r0, #0]
 800241c:	e7d6      	b.n	80023cc <_malloc_r+0xa8>
 800241e:	bf00      	nop
 8002420:	2000022c 	.word	0x2000022c

08002424 <__malloc_lock>:
 8002424:	4801      	ldr	r0, [pc, #4]	@ (800242c <__malloc_lock+0x8>)
 8002426:	f7ff bf0f 	b.w	8002248 <__retarget_lock_acquire_recursive>
 800242a:	bf00      	nop
 800242c:	20000224 	.word	0x20000224

08002430 <__malloc_unlock>:
 8002430:	4801      	ldr	r0, [pc, #4]	@ (8002438 <__malloc_unlock+0x8>)
 8002432:	f7ff bf0a 	b.w	800224a <__retarget_lock_release_recursive>
 8002436:	bf00      	nop
 8002438:	20000224 	.word	0x20000224

0800243c <__ssputs_r>:
 800243c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002440:	688e      	ldr	r6, [r1, #8]
 8002442:	461f      	mov	r7, r3
 8002444:	42be      	cmp	r6, r7
 8002446:	680b      	ldr	r3, [r1, #0]
 8002448:	4682      	mov	sl, r0
 800244a:	460c      	mov	r4, r1
 800244c:	4690      	mov	r8, r2
 800244e:	d82d      	bhi.n	80024ac <__ssputs_r+0x70>
 8002450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002454:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002458:	d026      	beq.n	80024a8 <__ssputs_r+0x6c>
 800245a:	6965      	ldr	r5, [r4, #20]
 800245c:	6909      	ldr	r1, [r1, #16]
 800245e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002462:	eba3 0901 	sub.w	r9, r3, r1
 8002466:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800246a:	1c7b      	adds	r3, r7, #1
 800246c:	444b      	add	r3, r9
 800246e:	106d      	asrs	r5, r5, #1
 8002470:	429d      	cmp	r5, r3
 8002472:	bf38      	it	cc
 8002474:	461d      	movcc	r5, r3
 8002476:	0553      	lsls	r3, r2, #21
 8002478:	d527      	bpl.n	80024ca <__ssputs_r+0x8e>
 800247a:	4629      	mov	r1, r5
 800247c:	f7ff ff52 	bl	8002324 <_malloc_r>
 8002480:	4606      	mov	r6, r0
 8002482:	b360      	cbz	r0, 80024de <__ssputs_r+0xa2>
 8002484:	6921      	ldr	r1, [r4, #16]
 8002486:	464a      	mov	r2, r9
 8002488:	f000 fae8 	bl	8002a5c <memcpy>
 800248c:	89a3      	ldrh	r3, [r4, #12]
 800248e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002496:	81a3      	strh	r3, [r4, #12]
 8002498:	6126      	str	r6, [r4, #16]
 800249a:	6165      	str	r5, [r4, #20]
 800249c:	444e      	add	r6, r9
 800249e:	eba5 0509 	sub.w	r5, r5, r9
 80024a2:	6026      	str	r6, [r4, #0]
 80024a4:	60a5      	str	r5, [r4, #8]
 80024a6:	463e      	mov	r6, r7
 80024a8:	42be      	cmp	r6, r7
 80024aa:	d900      	bls.n	80024ae <__ssputs_r+0x72>
 80024ac:	463e      	mov	r6, r7
 80024ae:	6820      	ldr	r0, [r4, #0]
 80024b0:	4632      	mov	r2, r6
 80024b2:	4641      	mov	r1, r8
 80024b4:	f000 faa8 	bl	8002a08 <memmove>
 80024b8:	68a3      	ldr	r3, [r4, #8]
 80024ba:	1b9b      	subs	r3, r3, r6
 80024bc:	60a3      	str	r3, [r4, #8]
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	4433      	add	r3, r6
 80024c2:	6023      	str	r3, [r4, #0]
 80024c4:	2000      	movs	r0, #0
 80024c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024ca:	462a      	mov	r2, r5
 80024cc:	f000 fad4 	bl	8002a78 <_realloc_r>
 80024d0:	4606      	mov	r6, r0
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d1e0      	bne.n	8002498 <__ssputs_r+0x5c>
 80024d6:	6921      	ldr	r1, [r4, #16]
 80024d8:	4650      	mov	r0, sl
 80024da:	f7ff feb7 	bl	800224c <_free_r>
 80024de:	230c      	movs	r3, #12
 80024e0:	f8ca 3000 	str.w	r3, [sl]
 80024e4:	89a3      	ldrh	r3, [r4, #12]
 80024e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024ea:	81a3      	strh	r3, [r4, #12]
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	e7e9      	b.n	80024c6 <__ssputs_r+0x8a>
	...

080024f4 <_svfiprintf_r>:
 80024f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f8:	4698      	mov	r8, r3
 80024fa:	898b      	ldrh	r3, [r1, #12]
 80024fc:	061b      	lsls	r3, r3, #24
 80024fe:	b09d      	sub	sp, #116	@ 0x74
 8002500:	4607      	mov	r7, r0
 8002502:	460d      	mov	r5, r1
 8002504:	4614      	mov	r4, r2
 8002506:	d510      	bpl.n	800252a <_svfiprintf_r+0x36>
 8002508:	690b      	ldr	r3, [r1, #16]
 800250a:	b973      	cbnz	r3, 800252a <_svfiprintf_r+0x36>
 800250c:	2140      	movs	r1, #64	@ 0x40
 800250e:	f7ff ff09 	bl	8002324 <_malloc_r>
 8002512:	6028      	str	r0, [r5, #0]
 8002514:	6128      	str	r0, [r5, #16]
 8002516:	b930      	cbnz	r0, 8002526 <_svfiprintf_r+0x32>
 8002518:	230c      	movs	r3, #12
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	b01d      	add	sp, #116	@ 0x74
 8002522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002526:	2340      	movs	r3, #64	@ 0x40
 8002528:	616b      	str	r3, [r5, #20]
 800252a:	2300      	movs	r3, #0
 800252c:	9309      	str	r3, [sp, #36]	@ 0x24
 800252e:	2320      	movs	r3, #32
 8002530:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002534:	f8cd 800c 	str.w	r8, [sp, #12]
 8002538:	2330      	movs	r3, #48	@ 0x30
 800253a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80026d8 <_svfiprintf_r+0x1e4>
 800253e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002542:	f04f 0901 	mov.w	r9, #1
 8002546:	4623      	mov	r3, r4
 8002548:	469a      	mov	sl, r3
 800254a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800254e:	b10a      	cbz	r2, 8002554 <_svfiprintf_r+0x60>
 8002550:	2a25      	cmp	r2, #37	@ 0x25
 8002552:	d1f9      	bne.n	8002548 <_svfiprintf_r+0x54>
 8002554:	ebba 0b04 	subs.w	fp, sl, r4
 8002558:	d00b      	beq.n	8002572 <_svfiprintf_r+0x7e>
 800255a:	465b      	mov	r3, fp
 800255c:	4622      	mov	r2, r4
 800255e:	4629      	mov	r1, r5
 8002560:	4638      	mov	r0, r7
 8002562:	f7ff ff6b 	bl	800243c <__ssputs_r>
 8002566:	3001      	adds	r0, #1
 8002568:	f000 80a7 	beq.w	80026ba <_svfiprintf_r+0x1c6>
 800256c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800256e:	445a      	add	r2, fp
 8002570:	9209      	str	r2, [sp, #36]	@ 0x24
 8002572:	f89a 3000 	ldrb.w	r3, [sl]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 809f 	beq.w	80026ba <_svfiprintf_r+0x1c6>
 800257c:	2300      	movs	r3, #0
 800257e:	f04f 32ff 	mov.w	r2, #4294967295
 8002582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002586:	f10a 0a01 	add.w	sl, sl, #1
 800258a:	9304      	str	r3, [sp, #16]
 800258c:	9307      	str	r3, [sp, #28]
 800258e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002592:	931a      	str	r3, [sp, #104]	@ 0x68
 8002594:	4654      	mov	r4, sl
 8002596:	2205      	movs	r2, #5
 8002598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800259c:	484e      	ldr	r0, [pc, #312]	@ (80026d8 <_svfiprintf_r+0x1e4>)
 800259e:	f7fd fe17 	bl	80001d0 <memchr>
 80025a2:	9a04      	ldr	r2, [sp, #16]
 80025a4:	b9d8      	cbnz	r0, 80025de <_svfiprintf_r+0xea>
 80025a6:	06d0      	lsls	r0, r2, #27
 80025a8:	bf44      	itt	mi
 80025aa:	2320      	movmi	r3, #32
 80025ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025b0:	0711      	lsls	r1, r2, #28
 80025b2:	bf44      	itt	mi
 80025b4:	232b      	movmi	r3, #43	@ 0x2b
 80025b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025ba:	f89a 3000 	ldrb.w	r3, [sl]
 80025be:	2b2a      	cmp	r3, #42	@ 0x2a
 80025c0:	d015      	beq.n	80025ee <_svfiprintf_r+0xfa>
 80025c2:	9a07      	ldr	r2, [sp, #28]
 80025c4:	4654      	mov	r4, sl
 80025c6:	2000      	movs	r0, #0
 80025c8:	f04f 0c0a 	mov.w	ip, #10
 80025cc:	4621      	mov	r1, r4
 80025ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025d2:	3b30      	subs	r3, #48	@ 0x30
 80025d4:	2b09      	cmp	r3, #9
 80025d6:	d94b      	bls.n	8002670 <_svfiprintf_r+0x17c>
 80025d8:	b1b0      	cbz	r0, 8002608 <_svfiprintf_r+0x114>
 80025da:	9207      	str	r2, [sp, #28]
 80025dc:	e014      	b.n	8002608 <_svfiprintf_r+0x114>
 80025de:	eba0 0308 	sub.w	r3, r0, r8
 80025e2:	fa09 f303 	lsl.w	r3, r9, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	9304      	str	r3, [sp, #16]
 80025ea:	46a2      	mov	sl, r4
 80025ec:	e7d2      	b.n	8002594 <_svfiprintf_r+0xa0>
 80025ee:	9b03      	ldr	r3, [sp, #12]
 80025f0:	1d19      	adds	r1, r3, #4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	9103      	str	r1, [sp, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bfbb      	ittet	lt
 80025fa:	425b      	neglt	r3, r3
 80025fc:	f042 0202 	orrlt.w	r2, r2, #2
 8002600:	9307      	strge	r3, [sp, #28]
 8002602:	9307      	strlt	r3, [sp, #28]
 8002604:	bfb8      	it	lt
 8002606:	9204      	strlt	r2, [sp, #16]
 8002608:	7823      	ldrb	r3, [r4, #0]
 800260a:	2b2e      	cmp	r3, #46	@ 0x2e
 800260c:	d10a      	bne.n	8002624 <_svfiprintf_r+0x130>
 800260e:	7863      	ldrb	r3, [r4, #1]
 8002610:	2b2a      	cmp	r3, #42	@ 0x2a
 8002612:	d132      	bne.n	800267a <_svfiprintf_r+0x186>
 8002614:	9b03      	ldr	r3, [sp, #12]
 8002616:	1d1a      	adds	r2, r3, #4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	9203      	str	r2, [sp, #12]
 800261c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002620:	3402      	adds	r4, #2
 8002622:	9305      	str	r3, [sp, #20]
 8002624:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80026e8 <_svfiprintf_r+0x1f4>
 8002628:	7821      	ldrb	r1, [r4, #0]
 800262a:	2203      	movs	r2, #3
 800262c:	4650      	mov	r0, sl
 800262e:	f7fd fdcf 	bl	80001d0 <memchr>
 8002632:	b138      	cbz	r0, 8002644 <_svfiprintf_r+0x150>
 8002634:	9b04      	ldr	r3, [sp, #16]
 8002636:	eba0 000a 	sub.w	r0, r0, sl
 800263a:	2240      	movs	r2, #64	@ 0x40
 800263c:	4082      	lsls	r2, r0
 800263e:	4313      	orrs	r3, r2
 8002640:	3401      	adds	r4, #1
 8002642:	9304      	str	r3, [sp, #16]
 8002644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002648:	4824      	ldr	r0, [pc, #144]	@ (80026dc <_svfiprintf_r+0x1e8>)
 800264a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800264e:	2206      	movs	r2, #6
 8002650:	f7fd fdbe 	bl	80001d0 <memchr>
 8002654:	2800      	cmp	r0, #0
 8002656:	d036      	beq.n	80026c6 <_svfiprintf_r+0x1d2>
 8002658:	4b21      	ldr	r3, [pc, #132]	@ (80026e0 <_svfiprintf_r+0x1ec>)
 800265a:	bb1b      	cbnz	r3, 80026a4 <_svfiprintf_r+0x1b0>
 800265c:	9b03      	ldr	r3, [sp, #12]
 800265e:	3307      	adds	r3, #7
 8002660:	f023 0307 	bic.w	r3, r3, #7
 8002664:	3308      	adds	r3, #8
 8002666:	9303      	str	r3, [sp, #12]
 8002668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800266a:	4433      	add	r3, r6
 800266c:	9309      	str	r3, [sp, #36]	@ 0x24
 800266e:	e76a      	b.n	8002546 <_svfiprintf_r+0x52>
 8002670:	fb0c 3202 	mla	r2, ip, r2, r3
 8002674:	460c      	mov	r4, r1
 8002676:	2001      	movs	r0, #1
 8002678:	e7a8      	b.n	80025cc <_svfiprintf_r+0xd8>
 800267a:	2300      	movs	r3, #0
 800267c:	3401      	adds	r4, #1
 800267e:	9305      	str	r3, [sp, #20]
 8002680:	4619      	mov	r1, r3
 8002682:	f04f 0c0a 	mov.w	ip, #10
 8002686:	4620      	mov	r0, r4
 8002688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800268c:	3a30      	subs	r2, #48	@ 0x30
 800268e:	2a09      	cmp	r2, #9
 8002690:	d903      	bls.n	800269a <_svfiprintf_r+0x1a6>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0c6      	beq.n	8002624 <_svfiprintf_r+0x130>
 8002696:	9105      	str	r1, [sp, #20]
 8002698:	e7c4      	b.n	8002624 <_svfiprintf_r+0x130>
 800269a:	fb0c 2101 	mla	r1, ip, r1, r2
 800269e:	4604      	mov	r4, r0
 80026a0:	2301      	movs	r3, #1
 80026a2:	e7f0      	b.n	8002686 <_svfiprintf_r+0x192>
 80026a4:	ab03      	add	r3, sp, #12
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	462a      	mov	r2, r5
 80026aa:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <_svfiprintf_r+0x1f0>)
 80026ac:	a904      	add	r1, sp, #16
 80026ae:	4638      	mov	r0, r7
 80026b0:	f3af 8000 	nop.w
 80026b4:	1c42      	adds	r2, r0, #1
 80026b6:	4606      	mov	r6, r0
 80026b8:	d1d6      	bne.n	8002668 <_svfiprintf_r+0x174>
 80026ba:	89ab      	ldrh	r3, [r5, #12]
 80026bc:	065b      	lsls	r3, r3, #25
 80026be:	f53f af2d 	bmi.w	800251c <_svfiprintf_r+0x28>
 80026c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80026c4:	e72c      	b.n	8002520 <_svfiprintf_r+0x2c>
 80026c6:	ab03      	add	r3, sp, #12
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	462a      	mov	r2, r5
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <_svfiprintf_r+0x1f0>)
 80026ce:	a904      	add	r1, sp, #16
 80026d0:	4638      	mov	r0, r7
 80026d2:	f000 f879 	bl	80027c8 <_printf_i>
 80026d6:	e7ed      	b.n	80026b4 <_svfiprintf_r+0x1c0>
 80026d8:	08002b34 	.word	0x08002b34
 80026dc:	08002b3e 	.word	0x08002b3e
 80026e0:	00000000 	.word	0x00000000
 80026e4:	0800243d 	.word	0x0800243d
 80026e8:	08002b3a 	.word	0x08002b3a

080026ec <_printf_common>:
 80026ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026f0:	4616      	mov	r6, r2
 80026f2:	4698      	mov	r8, r3
 80026f4:	688a      	ldr	r2, [r1, #8]
 80026f6:	690b      	ldr	r3, [r1, #16]
 80026f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80026fc:	4293      	cmp	r3, r2
 80026fe:	bfb8      	it	lt
 8002700:	4613      	movlt	r3, r2
 8002702:	6033      	str	r3, [r6, #0]
 8002704:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002708:	4607      	mov	r7, r0
 800270a:	460c      	mov	r4, r1
 800270c:	b10a      	cbz	r2, 8002712 <_printf_common+0x26>
 800270e:	3301      	adds	r3, #1
 8002710:	6033      	str	r3, [r6, #0]
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	0699      	lsls	r1, r3, #26
 8002716:	bf42      	ittt	mi
 8002718:	6833      	ldrmi	r3, [r6, #0]
 800271a:	3302      	addmi	r3, #2
 800271c:	6033      	strmi	r3, [r6, #0]
 800271e:	6825      	ldr	r5, [r4, #0]
 8002720:	f015 0506 	ands.w	r5, r5, #6
 8002724:	d106      	bne.n	8002734 <_printf_common+0x48>
 8002726:	f104 0a19 	add.w	sl, r4, #25
 800272a:	68e3      	ldr	r3, [r4, #12]
 800272c:	6832      	ldr	r2, [r6, #0]
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	42ab      	cmp	r3, r5
 8002732:	dc26      	bgt.n	8002782 <_printf_common+0x96>
 8002734:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002738:	6822      	ldr	r2, [r4, #0]
 800273a:	3b00      	subs	r3, #0
 800273c:	bf18      	it	ne
 800273e:	2301      	movne	r3, #1
 8002740:	0692      	lsls	r2, r2, #26
 8002742:	d42b      	bmi.n	800279c <_printf_common+0xb0>
 8002744:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002748:	4641      	mov	r1, r8
 800274a:	4638      	mov	r0, r7
 800274c:	47c8      	blx	r9
 800274e:	3001      	adds	r0, #1
 8002750:	d01e      	beq.n	8002790 <_printf_common+0xa4>
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	6922      	ldr	r2, [r4, #16]
 8002756:	f003 0306 	and.w	r3, r3, #6
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf02      	ittt	eq
 800275e:	68e5      	ldreq	r5, [r4, #12]
 8002760:	6833      	ldreq	r3, [r6, #0]
 8002762:	1aed      	subeq	r5, r5, r3
 8002764:	68a3      	ldr	r3, [r4, #8]
 8002766:	bf0c      	ite	eq
 8002768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800276c:	2500      	movne	r5, #0
 800276e:	4293      	cmp	r3, r2
 8002770:	bfc4      	itt	gt
 8002772:	1a9b      	subgt	r3, r3, r2
 8002774:	18ed      	addgt	r5, r5, r3
 8002776:	2600      	movs	r6, #0
 8002778:	341a      	adds	r4, #26
 800277a:	42b5      	cmp	r5, r6
 800277c:	d11a      	bne.n	80027b4 <_printf_common+0xc8>
 800277e:	2000      	movs	r0, #0
 8002780:	e008      	b.n	8002794 <_printf_common+0xa8>
 8002782:	2301      	movs	r3, #1
 8002784:	4652      	mov	r2, sl
 8002786:	4641      	mov	r1, r8
 8002788:	4638      	mov	r0, r7
 800278a:	47c8      	blx	r9
 800278c:	3001      	adds	r0, #1
 800278e:	d103      	bne.n	8002798 <_printf_common+0xac>
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002798:	3501      	adds	r5, #1
 800279a:	e7c6      	b.n	800272a <_printf_common+0x3e>
 800279c:	18e1      	adds	r1, r4, r3
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	2030      	movs	r0, #48	@ 0x30
 80027a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80027a6:	4422      	add	r2, r4
 80027a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80027ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80027b0:	3302      	adds	r3, #2
 80027b2:	e7c7      	b.n	8002744 <_printf_common+0x58>
 80027b4:	2301      	movs	r3, #1
 80027b6:	4622      	mov	r2, r4
 80027b8:	4641      	mov	r1, r8
 80027ba:	4638      	mov	r0, r7
 80027bc:	47c8      	blx	r9
 80027be:	3001      	adds	r0, #1
 80027c0:	d0e6      	beq.n	8002790 <_printf_common+0xa4>
 80027c2:	3601      	adds	r6, #1
 80027c4:	e7d9      	b.n	800277a <_printf_common+0x8e>
	...

080027c8 <_printf_i>:
 80027c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027cc:	7e0f      	ldrb	r7, [r1, #24]
 80027ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80027d0:	2f78      	cmp	r7, #120	@ 0x78
 80027d2:	4691      	mov	r9, r2
 80027d4:	4680      	mov	r8, r0
 80027d6:	460c      	mov	r4, r1
 80027d8:	469a      	mov	sl, r3
 80027da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80027de:	d807      	bhi.n	80027f0 <_printf_i+0x28>
 80027e0:	2f62      	cmp	r7, #98	@ 0x62
 80027e2:	d80a      	bhi.n	80027fa <_printf_i+0x32>
 80027e4:	2f00      	cmp	r7, #0
 80027e6:	f000 80d2 	beq.w	800298e <_printf_i+0x1c6>
 80027ea:	2f58      	cmp	r7, #88	@ 0x58
 80027ec:	f000 80b9 	beq.w	8002962 <_printf_i+0x19a>
 80027f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80027f8:	e03a      	b.n	8002870 <_printf_i+0xa8>
 80027fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80027fe:	2b15      	cmp	r3, #21
 8002800:	d8f6      	bhi.n	80027f0 <_printf_i+0x28>
 8002802:	a101      	add	r1, pc, #4	@ (adr r1, 8002808 <_printf_i+0x40>)
 8002804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002808:	08002861 	.word	0x08002861
 800280c:	08002875 	.word	0x08002875
 8002810:	080027f1 	.word	0x080027f1
 8002814:	080027f1 	.word	0x080027f1
 8002818:	080027f1 	.word	0x080027f1
 800281c:	080027f1 	.word	0x080027f1
 8002820:	08002875 	.word	0x08002875
 8002824:	080027f1 	.word	0x080027f1
 8002828:	080027f1 	.word	0x080027f1
 800282c:	080027f1 	.word	0x080027f1
 8002830:	080027f1 	.word	0x080027f1
 8002834:	08002975 	.word	0x08002975
 8002838:	0800289f 	.word	0x0800289f
 800283c:	0800292f 	.word	0x0800292f
 8002840:	080027f1 	.word	0x080027f1
 8002844:	080027f1 	.word	0x080027f1
 8002848:	08002997 	.word	0x08002997
 800284c:	080027f1 	.word	0x080027f1
 8002850:	0800289f 	.word	0x0800289f
 8002854:	080027f1 	.word	0x080027f1
 8002858:	080027f1 	.word	0x080027f1
 800285c:	08002937 	.word	0x08002937
 8002860:	6833      	ldr	r3, [r6, #0]
 8002862:	1d1a      	adds	r2, r3, #4
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6032      	str	r2, [r6, #0]
 8002868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800286c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002870:	2301      	movs	r3, #1
 8002872:	e09d      	b.n	80029b0 <_printf_i+0x1e8>
 8002874:	6833      	ldr	r3, [r6, #0]
 8002876:	6820      	ldr	r0, [r4, #0]
 8002878:	1d19      	adds	r1, r3, #4
 800287a:	6031      	str	r1, [r6, #0]
 800287c:	0606      	lsls	r6, r0, #24
 800287e:	d501      	bpl.n	8002884 <_printf_i+0xbc>
 8002880:	681d      	ldr	r5, [r3, #0]
 8002882:	e003      	b.n	800288c <_printf_i+0xc4>
 8002884:	0645      	lsls	r5, r0, #25
 8002886:	d5fb      	bpl.n	8002880 <_printf_i+0xb8>
 8002888:	f9b3 5000 	ldrsh.w	r5, [r3]
 800288c:	2d00      	cmp	r5, #0
 800288e:	da03      	bge.n	8002898 <_printf_i+0xd0>
 8002890:	232d      	movs	r3, #45	@ 0x2d
 8002892:	426d      	negs	r5, r5
 8002894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002898:	4859      	ldr	r0, [pc, #356]	@ (8002a00 <_printf_i+0x238>)
 800289a:	230a      	movs	r3, #10
 800289c:	e011      	b.n	80028c2 <_printf_i+0xfa>
 800289e:	6821      	ldr	r1, [r4, #0]
 80028a0:	6833      	ldr	r3, [r6, #0]
 80028a2:	0608      	lsls	r0, r1, #24
 80028a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80028a8:	d402      	bmi.n	80028b0 <_printf_i+0xe8>
 80028aa:	0649      	lsls	r1, r1, #25
 80028ac:	bf48      	it	mi
 80028ae:	b2ad      	uxthmi	r5, r5
 80028b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80028b2:	4853      	ldr	r0, [pc, #332]	@ (8002a00 <_printf_i+0x238>)
 80028b4:	6033      	str	r3, [r6, #0]
 80028b6:	bf14      	ite	ne
 80028b8:	230a      	movne	r3, #10
 80028ba:	2308      	moveq	r3, #8
 80028bc:	2100      	movs	r1, #0
 80028be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80028c2:	6866      	ldr	r6, [r4, #4]
 80028c4:	60a6      	str	r6, [r4, #8]
 80028c6:	2e00      	cmp	r6, #0
 80028c8:	bfa2      	ittt	ge
 80028ca:	6821      	ldrge	r1, [r4, #0]
 80028cc:	f021 0104 	bicge.w	r1, r1, #4
 80028d0:	6021      	strge	r1, [r4, #0]
 80028d2:	b90d      	cbnz	r5, 80028d8 <_printf_i+0x110>
 80028d4:	2e00      	cmp	r6, #0
 80028d6:	d04b      	beq.n	8002970 <_printf_i+0x1a8>
 80028d8:	4616      	mov	r6, r2
 80028da:	fbb5 f1f3 	udiv	r1, r5, r3
 80028de:	fb03 5711 	mls	r7, r3, r1, r5
 80028e2:	5dc7      	ldrb	r7, [r0, r7]
 80028e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80028e8:	462f      	mov	r7, r5
 80028ea:	42bb      	cmp	r3, r7
 80028ec:	460d      	mov	r5, r1
 80028ee:	d9f4      	bls.n	80028da <_printf_i+0x112>
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d10b      	bne.n	800290c <_printf_i+0x144>
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	07df      	lsls	r7, r3, #31
 80028f8:	d508      	bpl.n	800290c <_printf_i+0x144>
 80028fa:	6923      	ldr	r3, [r4, #16]
 80028fc:	6861      	ldr	r1, [r4, #4]
 80028fe:	4299      	cmp	r1, r3
 8002900:	bfde      	ittt	le
 8002902:	2330      	movle	r3, #48	@ 0x30
 8002904:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002908:	f106 36ff 	addle.w	r6, r6, #4294967295
 800290c:	1b92      	subs	r2, r2, r6
 800290e:	6122      	str	r2, [r4, #16]
 8002910:	f8cd a000 	str.w	sl, [sp]
 8002914:	464b      	mov	r3, r9
 8002916:	aa03      	add	r2, sp, #12
 8002918:	4621      	mov	r1, r4
 800291a:	4640      	mov	r0, r8
 800291c:	f7ff fee6 	bl	80026ec <_printf_common>
 8002920:	3001      	adds	r0, #1
 8002922:	d14a      	bne.n	80029ba <_printf_i+0x1f2>
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	b004      	add	sp, #16
 800292a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	f043 0320 	orr.w	r3, r3, #32
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	4833      	ldr	r0, [pc, #204]	@ (8002a04 <_printf_i+0x23c>)
 8002938:	2778      	movs	r7, #120	@ 0x78
 800293a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	6831      	ldr	r1, [r6, #0]
 8002942:	061f      	lsls	r7, r3, #24
 8002944:	f851 5b04 	ldr.w	r5, [r1], #4
 8002948:	d402      	bmi.n	8002950 <_printf_i+0x188>
 800294a:	065f      	lsls	r7, r3, #25
 800294c:	bf48      	it	mi
 800294e:	b2ad      	uxthmi	r5, r5
 8002950:	6031      	str	r1, [r6, #0]
 8002952:	07d9      	lsls	r1, r3, #31
 8002954:	bf44      	itt	mi
 8002956:	f043 0320 	orrmi.w	r3, r3, #32
 800295a:	6023      	strmi	r3, [r4, #0]
 800295c:	b11d      	cbz	r5, 8002966 <_printf_i+0x19e>
 800295e:	2310      	movs	r3, #16
 8002960:	e7ac      	b.n	80028bc <_printf_i+0xf4>
 8002962:	4827      	ldr	r0, [pc, #156]	@ (8002a00 <_printf_i+0x238>)
 8002964:	e7e9      	b.n	800293a <_printf_i+0x172>
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	f023 0320 	bic.w	r3, r3, #32
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	e7f6      	b.n	800295e <_printf_i+0x196>
 8002970:	4616      	mov	r6, r2
 8002972:	e7bd      	b.n	80028f0 <_printf_i+0x128>
 8002974:	6833      	ldr	r3, [r6, #0]
 8002976:	6825      	ldr	r5, [r4, #0]
 8002978:	6961      	ldr	r1, [r4, #20]
 800297a:	1d18      	adds	r0, r3, #4
 800297c:	6030      	str	r0, [r6, #0]
 800297e:	062e      	lsls	r6, r5, #24
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	d501      	bpl.n	8002988 <_printf_i+0x1c0>
 8002984:	6019      	str	r1, [r3, #0]
 8002986:	e002      	b.n	800298e <_printf_i+0x1c6>
 8002988:	0668      	lsls	r0, r5, #25
 800298a:	d5fb      	bpl.n	8002984 <_printf_i+0x1bc>
 800298c:	8019      	strh	r1, [r3, #0]
 800298e:	2300      	movs	r3, #0
 8002990:	6123      	str	r3, [r4, #16]
 8002992:	4616      	mov	r6, r2
 8002994:	e7bc      	b.n	8002910 <_printf_i+0x148>
 8002996:	6833      	ldr	r3, [r6, #0]
 8002998:	1d1a      	adds	r2, r3, #4
 800299a:	6032      	str	r2, [r6, #0]
 800299c:	681e      	ldr	r6, [r3, #0]
 800299e:	6862      	ldr	r2, [r4, #4]
 80029a0:	2100      	movs	r1, #0
 80029a2:	4630      	mov	r0, r6
 80029a4:	f7fd fc14 	bl	80001d0 <memchr>
 80029a8:	b108      	cbz	r0, 80029ae <_printf_i+0x1e6>
 80029aa:	1b80      	subs	r0, r0, r6
 80029ac:	6060      	str	r0, [r4, #4]
 80029ae:	6863      	ldr	r3, [r4, #4]
 80029b0:	6123      	str	r3, [r4, #16]
 80029b2:	2300      	movs	r3, #0
 80029b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029b8:	e7aa      	b.n	8002910 <_printf_i+0x148>
 80029ba:	6923      	ldr	r3, [r4, #16]
 80029bc:	4632      	mov	r2, r6
 80029be:	4649      	mov	r1, r9
 80029c0:	4640      	mov	r0, r8
 80029c2:	47d0      	blx	sl
 80029c4:	3001      	adds	r0, #1
 80029c6:	d0ad      	beq.n	8002924 <_printf_i+0x15c>
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	079b      	lsls	r3, r3, #30
 80029cc:	d413      	bmi.n	80029f6 <_printf_i+0x22e>
 80029ce:	68e0      	ldr	r0, [r4, #12]
 80029d0:	9b03      	ldr	r3, [sp, #12]
 80029d2:	4298      	cmp	r0, r3
 80029d4:	bfb8      	it	lt
 80029d6:	4618      	movlt	r0, r3
 80029d8:	e7a6      	b.n	8002928 <_printf_i+0x160>
 80029da:	2301      	movs	r3, #1
 80029dc:	4632      	mov	r2, r6
 80029de:	4649      	mov	r1, r9
 80029e0:	4640      	mov	r0, r8
 80029e2:	47d0      	blx	sl
 80029e4:	3001      	adds	r0, #1
 80029e6:	d09d      	beq.n	8002924 <_printf_i+0x15c>
 80029e8:	3501      	adds	r5, #1
 80029ea:	68e3      	ldr	r3, [r4, #12]
 80029ec:	9903      	ldr	r1, [sp, #12]
 80029ee:	1a5b      	subs	r3, r3, r1
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dcf2      	bgt.n	80029da <_printf_i+0x212>
 80029f4:	e7eb      	b.n	80029ce <_printf_i+0x206>
 80029f6:	2500      	movs	r5, #0
 80029f8:	f104 0619 	add.w	r6, r4, #25
 80029fc:	e7f5      	b.n	80029ea <_printf_i+0x222>
 80029fe:	bf00      	nop
 8002a00:	08002b45 	.word	0x08002b45
 8002a04:	08002b56 	.word	0x08002b56

08002a08 <memmove>:
 8002a08:	4288      	cmp	r0, r1
 8002a0a:	b510      	push	{r4, lr}
 8002a0c:	eb01 0402 	add.w	r4, r1, r2
 8002a10:	d902      	bls.n	8002a18 <memmove+0x10>
 8002a12:	4284      	cmp	r4, r0
 8002a14:	4623      	mov	r3, r4
 8002a16:	d807      	bhi.n	8002a28 <memmove+0x20>
 8002a18:	1e43      	subs	r3, r0, #1
 8002a1a:	42a1      	cmp	r1, r4
 8002a1c:	d008      	beq.n	8002a30 <memmove+0x28>
 8002a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a26:	e7f8      	b.n	8002a1a <memmove+0x12>
 8002a28:	4402      	add	r2, r0
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	428a      	cmp	r2, r1
 8002a2e:	d100      	bne.n	8002a32 <memmove+0x2a>
 8002a30:	bd10      	pop	{r4, pc}
 8002a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a3a:	e7f7      	b.n	8002a2c <memmove+0x24>

08002a3c <_sbrk_r>:
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	4d06      	ldr	r5, [pc, #24]	@ (8002a58 <_sbrk_r+0x1c>)
 8002a40:	2300      	movs	r3, #0
 8002a42:	4604      	mov	r4, r0
 8002a44:	4608      	mov	r0, r1
 8002a46:	602b      	str	r3, [r5, #0]
 8002a48:	f7fe f88a 	bl	8000b60 <_sbrk>
 8002a4c:	1c43      	adds	r3, r0, #1
 8002a4e:	d102      	bne.n	8002a56 <_sbrk_r+0x1a>
 8002a50:	682b      	ldr	r3, [r5, #0]
 8002a52:	b103      	cbz	r3, 8002a56 <_sbrk_r+0x1a>
 8002a54:	6023      	str	r3, [r4, #0]
 8002a56:	bd38      	pop	{r3, r4, r5, pc}
 8002a58:	20000220 	.word	0x20000220

08002a5c <memcpy>:
 8002a5c:	440a      	add	r2, r1
 8002a5e:	4291      	cmp	r1, r2
 8002a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a64:	d100      	bne.n	8002a68 <memcpy+0xc>
 8002a66:	4770      	bx	lr
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a72:	4291      	cmp	r1, r2
 8002a74:	d1f9      	bne.n	8002a6a <memcpy+0xe>
 8002a76:	bd10      	pop	{r4, pc}

08002a78 <_realloc_r>:
 8002a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a7c:	4680      	mov	r8, r0
 8002a7e:	4615      	mov	r5, r2
 8002a80:	460c      	mov	r4, r1
 8002a82:	b921      	cbnz	r1, 8002a8e <_realloc_r+0x16>
 8002a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a88:	4611      	mov	r1, r2
 8002a8a:	f7ff bc4b 	b.w	8002324 <_malloc_r>
 8002a8e:	b92a      	cbnz	r2, 8002a9c <_realloc_r+0x24>
 8002a90:	f7ff fbdc 	bl	800224c <_free_r>
 8002a94:	2400      	movs	r4, #0
 8002a96:	4620      	mov	r0, r4
 8002a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a9c:	f000 f81a 	bl	8002ad4 <_malloc_usable_size_r>
 8002aa0:	4285      	cmp	r5, r0
 8002aa2:	4606      	mov	r6, r0
 8002aa4:	d802      	bhi.n	8002aac <_realloc_r+0x34>
 8002aa6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002aaa:	d8f4      	bhi.n	8002a96 <_realloc_r+0x1e>
 8002aac:	4629      	mov	r1, r5
 8002aae:	4640      	mov	r0, r8
 8002ab0:	f7ff fc38 	bl	8002324 <_malloc_r>
 8002ab4:	4607      	mov	r7, r0
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d0ec      	beq.n	8002a94 <_realloc_r+0x1c>
 8002aba:	42b5      	cmp	r5, r6
 8002abc:	462a      	mov	r2, r5
 8002abe:	4621      	mov	r1, r4
 8002ac0:	bf28      	it	cs
 8002ac2:	4632      	movcs	r2, r6
 8002ac4:	f7ff ffca 	bl	8002a5c <memcpy>
 8002ac8:	4621      	mov	r1, r4
 8002aca:	4640      	mov	r0, r8
 8002acc:	f7ff fbbe 	bl	800224c <_free_r>
 8002ad0:	463c      	mov	r4, r7
 8002ad2:	e7e0      	b.n	8002a96 <_realloc_r+0x1e>

08002ad4 <_malloc_usable_size_r>:
 8002ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ad8:	1f18      	subs	r0, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bfbc      	itt	lt
 8002ade:	580b      	ldrlt	r3, [r1, r0]
 8002ae0:	18c0      	addlt	r0, r0, r3
 8002ae2:	4770      	bx	lr

08002ae4 <_init>:
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae6:	bf00      	nop
 8002ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aea:	bc08      	pop	{r3}
 8002aec:	469e      	mov	lr, r3
 8002aee:	4770      	bx	lr

08002af0 <_fini>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr
